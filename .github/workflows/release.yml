name: Build and Release

on:
  push:
    branches:
      - main  # Запускать workflow при пуше в main

permissions:
  contents: write  # Даем права на запись в репозиторий

jobs:
  build:
    runs-on: windows-latest  # Сборка на Windows

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller
          pip list  # Проверяем установленные пакеты

      - name: Get latest GitHub release version
        id: get_version
        run: |
          VERSION=$(curl -s https://api.github.com/repos/${{ github.repository }}/releases/latest | jq -r .tag_name)
          echo "version=$VERSION" >> $GITHUB_ENV

      - name: Update version in version.txt
        run: |
          VERSION=${{ env.version }}
          
          # Преобразуем версию в формат (X, Y, Z, W)
          VERSION_TUPLE=$(echo $VERSION | sed 's/^v//;s/\./, /g')
          VERSION_TUPLE="($VERSION_TUPLE, 0)"
          
          # Преобразуем версию для StringStruct с точками
          VERSION_DOT=$(echo $VERSION | sed 's/^v//;s/\././g')

          echo "Updating version.txt with version: $VERSION"
          
          # Обновляем строки в version.txt
          sed -i "s/filevers=(.*)/filevers=$VERSION_TUPLE, # версия программы $VERSION/" version.txt
          sed -i "s/prodvers=(.*)/prodvers=$VERSION_TUPLE, # версия продукта $VERSION/" version.txt
          sed -i "s/StringStruct('FileVersion', .*)/StringStruct('FileVersion', u'$VERSION_DOT')/" version.txt

      - name: Verify required files
        run: |
          if (!(Test-Path "main.py")) { Write-Host "main.py не найден!" ; exit 1 }
          if (!(Test-Path "version.txt")) { Write-Host "version.txt не найден!" ; exit 1 }
          if (!(Test-Path "help.htm")) { Write-Host "help.htm не найден!" ; exit 1 }
          if (!(Test-Path "Blind_log.spec")) { Write-Host "Blind_log.spec не найден!" ; exit 1 }

      - name: Ensure version.txt is included in spec file
        run: |
          $specContent = Get-Content Blind_log.spec
          if ($specContent -notmatch "version.txt") {
            Write-Host "Добавление version.txt в Blind_log.spec..."
            $newSpec = $specContent -replace "datas=\[", "datas=[('version.txt', '.'),"
            Set-Content Blind_log.spec $newSpec
          }

      - name: Build executable with PyInstaller
        run: |
          pyinstaller Blind_log.spec

      - name: Archive build artifact
        run: Compress-Archive -Path dist\Blind_log.exe -DestinationPath dist\Blind_log.zip

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v0.2.${{ github.run_number }}  # Автоматический номер версии
          release_name: Blind Log v0.2.${{ github.run_number }}
          draft: false
          prerelease: false

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: dist\Blind_log.zip
          asset_name: Blind_log.zip
          asset_content_type: application/zip
